const { ipcRenderer } = require('electron');

let jsonSchema = null;
let xsdSchema = null;
let testData = [];

document.addEventListener('DOMContentLoaded', () => {
    initializeEventListeners();
});

function initializeEventListeners() {
    document.getElementById('loadJsonSchema').addEventListener('click', loadJsonSchema);
    document.getElementById('loadXsdSchema').addEventListener('click', loadXsdSchema);
    document.getElementById('loadTestData').addEventListener('click', loadTestData);
    document.getElementById('generateBtn').addEventListener('click', generateTemplate);
    document.getElementById('saveBtn').addEventListener('click', saveTemplate);
    document.getElementById('copyBtn').addEventListener('click', copyToClipboard);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Å—Ö–µ–º—ã
async function loadJsonSchema() {
    try {
        console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è JSON...');
        const result = await ipcRenderer.invoke('dialog:openFile', {
            filters: [
                { name: 'JSON Files', extensions: ['json'] },
                { name: 'All Files', extensions: ['*'] }
            ],
            properties: ['openFile']
        });
        
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞:', result);
        
        if (!result.canceled && result.filePaths.length > 0) {
            const filePath = result.filePaths[0];
            console.log('–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', filePath);
            
            const content = await ipcRenderer.invoke('file:read', filePath);
            jsonSchema = JSON.parse(content);
            
            document.getElementById('jsonSchemaStatus').textContent = `‚úì ${getFileName(filePath)}`;
            document.getElementById('jsonSchemaStatus').className = 'status ready';
            checkReadyState();
            
            showSuccess(`JSON —Å—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${getFileName(filePath)}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Å—Ö–µ–º—ã: ' + error.message);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ XSD —Å—Ö–µ–º—ã
async function loadXsdSchema() {
    try {
        console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è XSD...');
        const result = await ipcRenderer.invoke('dialog:openFile', {
            filters: [
                { name: 'XSD Files', extensions: ['xsd'] },
                { name: 'All Files', extensions: ['*'] }
            ],
            properties: ['openFile']
        });
        
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞:', result);
        
        if (!result.canceled && result.filePaths.length > 0) {
            const filePath = result.filePaths[0];
            console.log('–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', filePath);
            
            xsdSchema = await ipcRenderer.invoke('file:read', filePath);
            
            document.getElementById('xsdSchemaStatus').textContent = `‚úì ${getFileName(filePath)}`;
            document.getElementById('xsdSchemaStatus').className = 'status ready';
            checkReadyState();
            
            showSuccess(`XSD —Å—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${getFileName(filePath)}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XSD:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XSD —Å—Ö–µ–º—ã: ' + error.message);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadTestData() {
    try {
        console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        const result = await ipcRenderer.invoke('dialog:openFile', {
            filters: [
                { name: 'JSON Files', extensions: ['json'] },
                { name: 'All Files', extensions: ['*'] }
            ],
            properties: ['openFile', 'multiSelections']
        });
        
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞:', result);
        
        if (!result.canceled && result.filePaths.length > 0) {
            testData = [];
            
            for (const filePath of result.filePaths) {
                console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª:', filePath);
                const content = await ipcRenderer.invoke('file:read', filePath);
                testData.push(JSON.parse(content));
            }
            
            document.getElementById('testDataStatus').textContent = testData.length > 0 
                ? `‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${testData.length}` 
                : '‚úì –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)';
            document.getElementById('testDataStatus').className = 'status ready';
            checkReadyState();
            
            showSuccess(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: ${testData.length}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã)
function checkReadyState() {
    const isReady = jsonSchema && xsdSchema; // testData –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    document.getElementById('generateBtn').disabled = !isReady;
    console.log('–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', isReady, { 
        jsonSchema: !!jsonSchema, 
        xsdSchema: !!xsdSchema, 
        testData: testData.length 
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
async function generateTemplate() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞...');
        showLoading(true);
        
        const vmTemplate = generateVMTemplate(jsonSchema, xsdSchema, testData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        document.getElementById('result').value = vmTemplate;
        document.getElementById('resultSection').style.display = 'block';
        
        // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –í –ë–£–§–ï–†
        await copyToClipboardAuto();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: ' + error.message);
    } finally {
        showLoading(false);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function copyToClipboardAuto() {
    try {
        const content = document.getElementById('result').value;
        if (!content) {
            console.log('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (navigator.clipboard && window.isSecureContext) {
            // Modern Clipboard API
            await navigator.clipboard.writeText(content);
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤/—Å—Ä–µ–¥
            const textArea = document.createElement('textarea');
            textArea.value = content;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            const successful = document.execCommand('copy');
            document.body.removeChild(textArea);
            
            if (!successful) {
                throw new Error('Copy command failed');
            }
        }
        
        showAutoCopyNotification();
        console.log('–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        showSuccess('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
    }
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ-–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
function showAutoCopyNotification() {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 1000;
        animation: slideIn 0.3s ease;
        background: #9b59b6;
        border-left: 4px solid #8e44ad;
        max-width: 300px;
    `;
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px;">
            <span style="font-size: 18px;">üìã</span>
            <div>
                <div style="font-weight: 600;">–®–∞–±–ª–æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</div>
                <div style="font-size: 12px; opacity: 0.9;">–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä</div>
            </div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (document.body.contains(notification)) {
            document.body.removeChild(notification);
        }
    }, 4000);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VM-—à–∞–±–ª–æ–Ω–∞
function generateVMTemplate(jsonSchema, xsdSchema, testData) {
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è VM —à–∞–±–ª–æ–Ω–∞...');
    console.log('JSON Schema:', jsonSchema);
    console.log('Test data count:', testData.length);
    
    let template = `## Velocity Template for EPGU to VIS Integration
## Generated automatically
## Test data: ${testData.length > 0 ? `${testData.length} files loaded` : 'not used'}
<?xml version="1.0" encoding="UTF-8"?>
<AppDataRequest xmlns="http://socit.ru/kalin/orders/2.0.0">
  <SetRequest>
`;

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞—è–≤–ª–µ–Ω–∏—è
    if (jsonSchema.formData) {
        template += generateFormFields(jsonSchema.formData);
    }

    // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ c7
    if (jsonSchema.c7) {
        template += generateUserData(jsonSchema.c7);
    }

    template += `  </SetRequest>
</AppDataRequest>`;
    
    return template;
}

function generateFormFields(formData) {
    let fields = '';
    
    const fieldMappings = {
        'orderId': 'orderId',
        'ServiceCode': 'ServiceCode', 
        'ServiceName': 'ServiceName'
    };
    
    for (const [jsonField, xmlField] of Object.entries(fieldMappings)) {
        if (formData[jsonField]) {
            fields += `    <${xmlField}>${formData[jsonField]}</${xmlField}>\n`;
        }
    }
    
    return fields;
}

function generateUserData(userData) {
    let userDataBlock = `    <userData>\n`;
    
    const fieldMappings = {
        'lastName': 'lastName',
        'firstName': 'firstName',
        'middleName': 'middleName',
        'birthDate': 'birthDate',
        'Sex': 'Sex',
        'Snils': 'Snils', 
        'Inn': 'Inn',
        'phone': 'phone',
        'Email': 'Email',
        'citizenship': 'citizenship'
    };
    
    for (const [jsonField, xmlField] of Object.entries(fieldMappings)) {
        if (userData[jsonField]) {
            userDataBlock += `      <${xmlField}>$c7.${jsonField}</${xmlField}>\n`;
        }
    }
    
    userDataBlock += `    </userData>\n`;
    return userDataBlock;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
async function saveTemplate() {
    try {
        const content = document.getElementById('result').value;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —É—Å–ª—É–≥–∏ –∏–∑ JSON —Å—Ö–µ–º—ã (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã)
        let serviceCode = '00000000';
        
        // 1. –ò—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π JSON —Å—Ö–µ–º–µ
        if (jsonSchema && jsonSchema.formData && jsonSchema.formData.ServiceCode) {
            serviceCode = jsonSchema.formData.ServiceCode;
        }
        // 2. –ò—â–µ–º –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
        else if (testData.length > 0 && testData[0].formData && testData[0].formData.ServiceCode) {
            serviceCode = testData[0].formData.ServiceCode;
        }
        // 3. –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ JSON —Å—Ö–µ–º—ã
        else if (jsonSchema && jsonSchema.ServiceCode) {
            serviceCode = jsonSchema.ServiceCode;
        }
        
        // –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        serviceCode = serviceCode.toString().replace(/\D/g, '');
        if (!serviceCode) serviceCode = '00000000';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É: "xxxxxxxx_Applicant.vm"
        const fileName = `${serviceCode}_Applicant.vm`;
        
        const result = await ipcRenderer.invoke('dialog:saveFile', {
            filters: [
                { name: 'VM Templates', extensions: ['vm'] },
                { name: 'All Files', extensions: ['*'] }
            ],
            defaultPath: fileName
        });
        
        if (!result.canceled) {
            await ipcRenderer.invoke('file:write', result.filePath, content);
            showSuccess(`–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${getFileName(result.filePath)}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
    }
}

// –†—É—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä (–¥–ª—è –∫–Ω–æ–ø–∫–∏)
async function copyToClipboard() {
    try {
        const content = document.getElementById('result').value;
        
        if (navigator.clipboard && window.isSecureContext) {
            await navigator.clipboard.writeText(content);
        } else {
            const textArea = document.createElement('textarea');
            textArea.value = content;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
        }
        
        showSuccess('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        showError('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getFileName(filePath) {
    return filePath.split(/[\\/]/).pop();
}

function showLoading(show) {
    const btn = document.getElementById('generateBtn');
    const btnText = btn.querySelector('.btn-text');
    
    if (show) {
        btnText.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...';
        btn.disabled = true;
    } else {
        btnText.textContent = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω';
        btn.disabled = false;
    }
}

function showSuccess(message) {
    showNotification(message, 'success');
}

function showError(message) {
    showNotification(message, 'error');
}

function showNotification(message, type) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏–∑ HTML
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (document.body.contains(notification)) {
            document.body.removeChild(notification);
        }
    }, 4000);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ HTML
if (!document.querySelector('style[data-dynamic]')) {
    const style = document.createElement('style');
    style.setAttribute('data-dynamic', 'true');
    style.textContent = `
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }
        
        .notification.success {
            background: #27ae60;
        }
        
        .notification.error {
            background: #e74c3c;
        }
    `;
    document.head.appendChild(style);
}